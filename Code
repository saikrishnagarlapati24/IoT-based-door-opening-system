#include "FS.h"
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include<Servo.h>

const char* ssid = "SaiBalaji";
const char* password = "saibalu@789";

long lastMsg = 0;
char msg[50];
int ledPin = 2;
int inpin = 14;
int value = LOW;
Servo servo;

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org");

const char* AWS_endpoint = "a3tafiat1czoes-ats.iot.ap-south-1.amazonaws.com"; //MQTT broker ip

void callback(char* topic, byte* payload, unsigned int length) {          //callback function
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}                                                                         //callback function//

WiFiServer server(80);

WiFiClientSecure espClient;
PubSubClient client(AWS_endpoint, 8883, callback, espClient); //set MQTT port number to 8883 as per //standard

//function to connect to wifi
void setup_wifi() {
  delay(10);
  // We start by connecting to a WiFi network
  espClient.setBufferSizes(512, 512);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  server.begin();
  Serial.println("Server started");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  timeClient.begin();
  while (!timeClient.update()) {
    timeClient.forceUpdate();
  }
  espClient.setX509Time(timeClient.getEpochTime());
}                                                                            //function to connect to wifi//



void reconnect() {                                                           //reconnect function
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect("ESPthing")) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish("outTopic", "hello world");
      // ... and resubscribe
      client.subscribe("inTopic");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");

      char buf[256];
      espClient.getLastSSLError(buf, 256);
      Serial.print("WiFiClientSecure SSL error: ");
      Serial.println(buf);

      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}                                                                            //reconnect function//


//setup function
void setup() {

  Serial.begin(115200);
  pinMode(inpin, INPUT);
  pinMode(ledPin, OUTPUT);
  servo.attach(13);
  servo.write(0);
  delay(2000);

  Serial.setDebugOutput(true);
  setup_wifi();
  delay(1000);
  if (!SPIFFS.begin()) {
    Serial.println("Failed to mount file system");
    return;
  }

  Serial.print("Heap: "); Serial.println(ESP.getFreeHeap());

  // Load certificate file
  File cert = SPIFFS.open("/cert.der", "r");
  if (!cert) {
    Serial.println("Failed to open cert file");
  }
  else
    Serial.println("Success to open cert file");

  delay(1000);

  if (espClient.loadCertificate(cert))
    Serial.println("cert loaded");
  else
    Serial.println("cert not loaded");

  // Load private key file
  File private_key = SPIFFS.open("/private.der", "r");
  if (!private_key) {
    Serial.println("Failed to open private cert file");
  }
  else
    Serial.println("Success to open private cert file");

  delay(1000);

  if (espClient.loadPrivateKey(private_key))
    Serial.println("private key loaded");
  else
    Serial.println("private key not loaded");

  // Load CA file
  File ca = SPIFFS.open("/ca.der", "r");
  if (!ca) {
    Serial.println("Failed to open ca ");
  }
  else
    Serial.println("Success to open ca");

  delay(1000);

  if (espClient.loadCACert(ca))
    Serial.println("ca loaded");
  else
    Serial.println("ca failed");

  Serial.print("Heap: "); Serial.println(ESP.getFreeHeap());
}                                                                            //setup function//


//loop  function

void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  long now = millis();
  if (now - lastMsg > 1000) {
    lastMsg = now;

    value = digitalRead(inpin);

    if (value < 1)
    {
      Serial.println("Someboy has come");

      const IPAddress &ipAddress = WiFi.localIP();
      String s = String(ipAddress[0]) + String(".") +  String(ipAddress[1]) + String(".") +  String(ipAddress[2]) + String(".") +  String(ipAddress[3]) ;
      s = "Somebody has come. Please connect to http://" + s + " to open/close the door.";

      client.publish("outTopic", s.c_str() );
      int i = 0;
      while (i < 10)
      {
        // Check if a client has connected
        WiFiClient client = server.available();
        if (!client) {
          //Serial.println("!client");
          continue;
        }

        // Wait until the client sends some data
        Serial.println("new client");
        while (!client.available()) {
          //Serial.println("wtng");
          delay(1);
        }
        Serial.println(i);
        i = i + 1;


        // Read the first line of the request
        String request = client.readStringUntil('\r');
        Serial.println(request);
        client.flush();

        // Match the request
        // Set ledPin according to the request
        int value = LOW;
        //if (request.indexOf("/LED=ON") != -1)  {
        if (request.indexOf("/LED=ON") == -1)  {
          digitalWrite(ledPin, HIGH);
          value = HIGH;
          servo.write(90);
          delay(1000);
        }
        //if (request.indexOf("/LED=OFF") != -1)  {
        else if (request.indexOf("/LED=OFF") == -1)  {
          digitalWrite(ledPin, LOW);
          value = LOW;
          servo.write(0);
          delay(1000);
        }

        // Return the response to the html page
        client.println("HTTP/1.1 200 OK");
        client.println("Content-Type: text/html");
        client.println(""); //  do not forget this one
        client.println("<!DOCTYPE HTML>");
        client.println("<html>");

        client.print("Door is now: ");
        if (value == HIGH) {
          client.print("Closed");
        }
        else {
          client.print("Opened");
        }

        client.println("<br><br>");
        client.println("<a href=\"/LED=ON\"><button>Open </button></a>");
        client.println("<a href=\"/LED=OFF\"><button>Close </button></a><br><br>");
        client.print("You still have ");
        client.print(10 - i);
        client.println(" chances.<br><br>");
        if (i == 10)
        {
          client.println("Session closed");
        }

        client.println("</html>");
        delay(1);
        Serial.println("Client disonnected");
        Serial.println("");
      }

    }
    else
    {
      Serial.println("nobody is present");
      //client.publish("outTopic", "Nobody is present");
      digitalWrite(ledPin, LOW);
    }

    Serial.print("Heap: "); Serial.println(ESP.getFreeHeap()); //Low heap can cause problems
  }
}                                                                           //loop function//
